---
title: "Taller 1: Filogenia y Evolución Molecular"
author: "Mayra Herrera Pacheco"
bibliography: references.bib
csl: apa.csl
---

# Objetivo

Este taller busca generar un flujo de trabajo reproducible y extensible para alinear secuencias y definir el mejor esquema de partición y sus modelos asociados.

-   Los archivos resultante de los análisis pueden ser visualizados y descargados en el siguiente repositorio, así como el scrip de Quarto: [Repositorio Filogenia_EvoMolecular](https://github.com/mayalehpa/Filogenia_EvoMolecular)

-   Cada Rutina cuenta con la interpretación de resultados.

# 1. Rutinas para alinear con al menos dos ajustes de parámetros

Las lineas de código están para ejecutarse directamente en la terminal.

## 1.1 Primer ajuste: Párametros predeterminados

-   En tu terminal ve al directorio donde se alejan los archivos .fasta

-   Ve a tu terminal de WSL y ejecuta el siguiente código:

``` bash
#COI
mafft --auto coi.fasta > coi.aln.fasta

#16s
mafft --auto 16s.fasta > 16s.aln.fasta
```

## 1.2 Segundo ajuste: Párametros modificados

*--maxiterate 1000:* establece el número máximo de iteraciones en 1000

*--localpair:* secuencias por debajo de 200

*--Gap open penalty:* de 1.53

-   Para los párametros modificados usaré maxiterate 1000, localpair y un GAP de 1.53

``` bash
mafft --maxiterate 1000 --localpair --op 1.53 coi.fasta > coi_custom.aln.fasta

mafft --maxiterate 1000 --localpair --op 1.53 16s.fasta > 16s_custom.aln.fasta
```

## 1.3 Interpretación de los resultados

Para comparar las alineaciones, puedes usar herramientas como `diff` para ver las diferencias entre los archivos de alineación:

``` bash
#COI
diff coi.aln.fasta coi_custom.aln.fasta > coi_diff.txt

#16s
diff 16s.aln.fasta 16s_custom.aln.fasta > 16s_diff.txt
```

Para mostrar las diferencias ejecuta el siguiente comando

``` bash
cat coi_diff.txt

cat 16s_diff.txt
```

Al comparar los archivos generados tras ambos alineamientos de secuencias, observé que tenían el mismo contenido y un tamaño de 0 KB, lo que indica la ausencia de diferencias. Esto podría deberse a que el archivo coi.fasta no contiene suficiente variabilidad entre las secuencias, limitando el impacto de los parámetros personalizados. Esto ocurrio tanto para el análisis con COI y 16s.

## 1.4 Alineamientos Múltiples

Para evitar alinear cada archivo individualmente, podemos usar una línea de comando que alinee automáticamente múltiples regiones ubicadas en una misma carpeta.

### 1.4.1 Creación de la carpeta

-   Crea un nuevo directorio: vamos a crear un directorio dentro de la carpeta fasta_files para almacenar los outputs alineados. En este caso se llamara "Aline_multiples".

``` bash
mkdir -p Aline_multiples
```

### 1.4.2 Código para alineamiento múltiple

-   Ejecuta el siguiente código para alineamiento múltiple, recuerda estar ubicado en la carpeta "fasta_files", alineara todos los archivos que se encuentren dentro de la carpeta con .fasta

``` bash
for file in *.fasta; do
  base_name="${file%.fasta}"
  mafft --auto "$file" > "Aline_multiples/${base_name}.aln.fasta"
done
```

**Nota:** la linea de mafft se pueden usar con párametros ajustados.

# 2. Rutina con estimación de modelos utilizando Model Finder

Para poder utilizar Model Finder debemos previamente instalar Iqtree2 en nuestra terminal.

## 2.1 Ejecutar ModelFinder para seleccionar el mejor modelo

-   Crear una carpeta para guardar los resultados

``` bash
mkdir -p Resultados_iqtree_modelfinder
```

### 2.1.1 coi.aln.fasta

El siguiente comando ejecutará IQ-TREE usando Model Finder para determinar el mejor modelo.

``` bash
iqtree2 -s coi.aln.fasta -m MF -redo -pre Coi_iqtree_modelfinder
```

`iqtree2` Es como se llama a la última versión de Iqtree.

`-redo` Esta opción indica a IQ-TREE que reemplace cualquier resultado anterior si ya existe un archivo de salida con el mismo nombre.

`MFP` Si agregamos P a MF + Indicar el Bootstrap sería para crear un árbol, en este caso solo queremos observar la selección del mejor modelo.

### 2.1.2 16s.aln.fasta

``` bash
iqtree2 -s 16s.aln.fasta -m MF -redo -pre 16s_iqtree_modelfinder
```

## 2.2 Mostrar el mejor modelo

### 2.2.1 coi.aln.fasta

Con la siguiente línea de comando podemos observar cual fue el mejor modelo:

``` bash
grep "Best-fit model" Coi_iqtree_modelfinder.iqtree
```

### 2.2.2 16s.aln.fasta

``` bash
grep "Best-fit model" 16s_iqtree_modelfinder.iqtree
```

## 2.3 Análisis de los Resultados

-   El análisis del gen COI con ModelFinder seleccionó el modelo **HKY+F+G4** como el más adecuado según el criterio de información bayesiano (BIC). El modelo HKY es un modelo de sustitución de nucleótidos que permite diferentes tasas de transición y transversión y considera las frecuencias de las bases [@hasegawa1985]. Es una extensión del modelo Kimura 2-parameter (K80). Este modelo es útil para la evolución de secuencias de ADN donde las transiciones son más frecuentes que las transversiones [@thephyl2009].

-   El análisis del gen **16S** con ModelFinder seleccionó el modelo **TIM2+F+G4** como el más adecuado según el criterio de información bayesiano (BIC). Este modelo utiliza la matriz **TIM2** (Transitional model 2), que permite diferentes tasas de sustitución entre transiciones y transversiones[@iq-tree2024], lo cual es especialmente útil para genes como el 16S donde estas variaciones son comunes. La opción **+F** incorpora las frecuencias observadas de nucleótidos, mejorando así la precisión del modelo al considerar la composición real de bases en el alineamiento. Además, la inclusión de la corrección **+G4** introduce heterogeneidad en las tasas de evolución a través de cuatro categorías gamma, permitiendo al modelo capturar variaciones en la velocidad de cambio entre diferentes sitios del gen 16S.

# 3. Rutina con estimación de modelos utilizando Partition Finder

--\> Para poder ejecutar Partition Finder debemos instalar Python 2.7.10 o superior (no 3.x)

--\> Para evitar conflicto con las librerias instalaremos Anaconda[@anacondasoftwaredistribution2016] en la terminal y posteriormente realizaremos la instalación de Python 2.7.18. En este paso es bueno utilizar la terminal nativa de Linux ya que si se instala desde el usuario de windows hay conflictos.

## 3.1 Instalaciones necesarias

### 3.1.1 Instalación de Anaconda

En este caso descargare desde su página el [instalador](https://repo.anaconda.com/archive/) y lo ejecutare desde una terminal nativa de linux.

``` bash
cd Descargas
bash ./Anaconda3-2024.06-1-Linux-x86_64.sh
export PATH="/home/may/anaconda/bin:$PATH"
```

`may` hace referencia al usuario que tengo en linux, debes modificarlo de acuerdo a tu usuario.

### 3.1.2 Crea un entorno en Anaconda para poder instalar Python 2.7.18

Esto es un paso importante ya que nos ayudara a realizar el análisis con PartitionFinder.

``` bash
conda create -n py27 python=2.7.18

## Activar el entorno

conda activate py27

## Verifica la versión de python

python --version

## Si quieres desactivar el entorno

conda deactivate
```

`py27` hace referencia al nombre que le quise colocar al entorno

### 3.1.3 Instala PartitionFinder

Ahora que estamos en el entorno de python 2.7.18, y con las librerias necesarias podremos instalar y ejecutar PartitionFinder para nuestro análisis.

3.1 Descarga PartitionFinder en su [página principal](https://www.robertlanfear.com/partitionfinder/) el archivo Source code (tar.gz)

3.2 Al descomprimir, aloja la carpeta en bin (sino tienes la carpeta bin, la puedes crear)

3.3 Ve a la terminal y ve hacia el directorio donde esta la carpeta

``` bash
cd ~/bin/partitionfinder-2.1.1
```

## 3.2 Ejecuta PartitionFinder

Después de estar en la carpeta de partitionfinder-2.1.1, ejecuta la siguiente linea de comando:

``` bash
phyton PartitionFinder.phy
```

### 3.2.1 Configuración del archivo .cfg

-   Para poder hacer el análisis de selección de modelo primero debemos configurar el archivo .cfg

-   Configurar el archivo partition_finder.cfg:

``` bash
vim partition_finder.cfg
```

El comando anterior es para crear el archivo de configuración con el **editor vim**, procederemos a ingresar la siguiente información: (las opciones se modifican de acuerdo a nuestros datos)

**Importante:** Los archivos que admite PartitionFinder es .nex o .phy. En nuestro caso usaremos .phy

``` bash
## Ejemplo con el archivo 16s_iqtree_modelfinder.uniqueseq.phy

## ALIGNMENT FILE ##
alignment = 16s_iqtree_modelfinder.uniqueseq.phy;

## BRANCHLENGTHS: linked | unlinked ##
branchlengths = linked;

## MODELS OF EVOLUTION: all | allx | mrbayes | beast | gamma | gammai | <list> ##
models = all;

# MODEL SELECCTION: AIC | AICc | BIC #
model_selection = BIC;

## DATA BLOCKS: see manual for how to define ##
[data_blocks]
all = 1-905;

## SCHEMES, search: all | user | greedy | rcluster | rclusterf | kmeans ##
[schemes]
search = all;
```

Para profundizar sobre la ejecución y análisis en PartitionFinder puedes ver el [tutorial](https://www.robertlanfear.com/partitionfinder/tutorial/) en la página principal.

### 3.2.2 Selección del modelo

Para realizar el análisis debemos tener el archivo .phy y el archivo .cfg en la misma carpeta que el ejecutable (PartitionFinder.py). Luego ejecuta el siguiente código:

**NOTA:** El programa solo reconoce un archivo de configuración bajo el nombre de "partition_finder.cfg". Por ello debemos configurarlo para cada archivo de .phy (ver punto [3.2.1 Configuración del archivo .cfg])

``` bash
python PartitionFinder.py partition_finder.cfg
```

Para visualizar los resultados después de este análisis en la carpeta `analysis` se guarda un archivo .txt llamado best_scheme. Para poder guardar el resultado podemos renombrarlo, así no se va a sobreescribir.

#### Comando para renombrar el archivo

``` bash
mv best_scheme.txt best_scheme_coi.txt
```

-   Luego modificaremos el archivo de configuración para 16s y ejecutaremos el primer código. Posteriormente renombramos el archivo .txt para no confundirnos.

-   En caso de estar presentando dificultades con la obtención de resultados podemos usar el siguiente comando para forzar.

``` bash
python PartitionFinder.py partition_finder.cfg --force-restart
```

## 3.3 Análisis de Resultados

### 3.3.1 Resultados para COI

El análisis con PartitionFinder muestra que el modelo seleccionado fue HKY+G [@hasegawa1985; @iq-tree2024]. La selección del modelo se basó en el criterio de información bayesiano (BIC), que arrojó un valor de 4944.97, indicando una buena adecuación del modelo en relación con el número de parámetros (100).

### 3.3.2 Resultados para 16S

El análisis con PartitionFinder muestra que el modelo seleccionado fue GTR+G. Abarcando un total de 905 sitios con 88 parámetros.

# 4. Rutina con estimación de modelos utilizando Mixture Models

## 4.1 MixtureFinder

Para crear la rutina utilizando [Mixture Models](http://www.iqtree.org/doc/Complex-Models), usaremos la herramienta MixtureFinder [^1] que se encuentra en Iqtree2 para saber que modelos podemos usar [@ren].

[^1]: **MixtureFinder:** Es una herramienta específica disponible en IQ-TREE (a partir de la versión 2.3.1) que ayuda a seleccionar el número óptimo de clases y el modelo de sustitución para cada clase dentro de un modelo de mezcla. *MixtureFinder* automatiza el proceso de selección de estos modelos de mezcla, ajustando el número de clases y evaluando el mejor modelo en función de criterios como BIC, AIC o pruebas de verosimilitud.

1.  Es importante que los archivos estén en formato FASTA o PHYLIP.

2.  Crea una nueva carpeta para guardar los resultados, recuerda agregar los archivos alineados FASTA o PHYLIP.

``` bash
mkdir -p MixtureFinder_analysis 
```

3.  Ejecuta el comando

``` bash
#16s
iqtree2 -s 16s_iqtree_modelfinder.uniqueseq.phy -m MIX+MF 

#COI
iqtree2 -s Coi_iqtree_modelfinder.uniqueseq.phy -m MIX+MF 
```

4.  Comando para saber cuál fue el mejor modelo

Entre todos los documentos generados al correr el análisis encontramos el archivo .log, el cual contiene los resultados y podremos observar el "Best-fit model". Pero empleando el siguiente comando en la terminal podremos obtenerlo de forma rápida:

``` bash
#16s
cat 16s_iqtree_modelfinder.uniqueseq.phy.log | grep "Best-fit model:" 

#COI
cat Coi_iqtree_modelfinder.uniqueseq.phy.log | grep "Best-fit model:" 
```

En este caso el mejor modelo de mezcla encontrado por el programa para 16s usando BIC fue: MIX{TIM2+FO,JC+FO}+G4

-   Dos modelos de sustitución (TIM2+FO y JC+FO).
-   Gamma rate heterogeneity con cuatro categorías (+G4)

Para COI el mejor modelo de mezcla encontra usando BIC fue: MIX{HKY+FO,JC+FO}+G4

## 4.2 Analizando el mejor modelo escogido por MixtureFinder

Ahora vamos a realizar el análisis con el modelo seleccionado en MixtureFinder

-   Ejecuta el siguiente comando:

``` bash
#16s
iqtree2 -s 16s_iqtree_modelfinder.uniqueseq.phy -m "MIX{TIM2+FO,JC+FO}+G4" -redo

#COI
iqtree2 -s Coi_iqtree_modelfinder.uniqueseq.phy -m "MIX{HKY+FO,JC+FO}+G4" -redo
```

`redo` Me permite sobreescribir en el archivo que ya se habia generado del análisis anterior

## 4.3 Análisis de resultados

Para la estimación de modelos usando Mixture Models en IQ-TREE, utilicé MixtureFinder, que evaluó diferentes modelos de sustitución para encontrar el ajuste óptimo según el criterio BIC. El análisis concluyó que el mejor modelo fue MIX{TIM2+FO,JC+FO}+G4 para el alineamiento de 16s. Este modelo combina los modelos de sustitución TIM2+FO y JC+FO, además de incorporar la heterogeneidad de tasas de evolución entre sitios con el modelo Gamma (+G4), el cual permite cuatro categorías de tasas. La selección de este modelo mixto indica que, en lugar de asignar un solo modelo a todos los sitios de la secuencia, se permite que diferentes sitios tengan probabilidades de pertenecer a distintas categorías de modelos de sustitución, lo que mejora la precisión de la inferencia al reflejar la variabilidad evolutiva en el conjunto de datos. Esta flexibilidad es esencial en análisis complejos, ya que incrementa la capacidad del modelo para capturar patrones evolutivos específicos, haciendo que el árbol resultante sea más robusto y adecuado para las características observadas en las secuencias.

El análisis del gen COI utilizando MixtureFinder identificó el modelo óptimo como MIX{HKY+FO, JC+FO} + G4. Este modelo es un modelo mixto que emplea dos componentes de sustitución, HKY+FO (un modelo que considera frecuencias observadas de bases y diferentes tasas de transición y transversión) y JC+FO (modelo de Jukes-Cantor con frecuencias observadas) [@jukes1969], además de una corrección de heterogeneidad de tasas de evolución gamma en cuatro categorías (+G4). La combinación de estos componentes permite que cada sitio en la secuencia tenga una probabilidad asignada de pertenecer a uno de los dos modelos de sustitución, lo cual refleja adecuadamente la variabilidad evolutiva en el gen COI.

# 5. Resumen y Análisis final

A continuación se mostrara un resumen en forma de tabla, para visualizar el mejor modelo escogido por cada programa para cada gen.

| Gen | Programa        | Mejor Modelo          | Criterio |
|-----|-----------------|-----------------------|----------|
| COI | ModelFinder     | HKY+F+G4              | BIC      |
| 16s | ModelFinder     | TIM2+F+G4             | BIC      |
| COI | PartitionFinder | HKY+G                 | BIC      |
| 16s | PartitionFinder | GTR+G                 | BIC      |
| COI | MixtureFinder   | MIX{HKY+FO,JC+FO}+G4  | BIC      |
| 16s | MixtureFinder   | MIX{TIM2+FO,JC+FO}+G4 | BIC      |

: Tabla 1. Resumen de los programas y selección del modelo para cada Gen analizado

El análisis comparativo de los modelos evolutivos seleccionados para los genes COI y 16S, realizado a través de diferentes programas, muestra la importancia de considerar múltiples enfoques en la elección del modelo adecuado. Por ejemplo, en la selección del modelo HKY para el gen COI, los tres programas utilizados lo escogieron como uno de los mejores modelos. De esta manera, el uso de múltiples herramientas no solo reafirma la elección de un modelo, sino que también permite explorar diferentes estrategias, como modelos mixtos y particionamiento de datos. Esta diversidad en los enfoques proporciona una comprensión más robusta de los modelos evolutivos, lo que me permitirá obtener un análisis más preciso.

# 6. Referencias Bibliográficas

::: {#refs}
:::
